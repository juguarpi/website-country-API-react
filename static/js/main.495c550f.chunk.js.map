{"version":3,"sources":["country.js","allcountry.js","detail.js","App.js","reportWebVitals.js","index.js"],"names":["Country","props","state","this","country","gotoDetailCountry","className","onClick","name","src","flag","alt","population","toLocaleString","region","capital","Component","AllCountry","countriesToRender","searchCountriesbyName","filterCountriesbyRegion","regions","type","placeholder","onChange","e","input","target","value","onMouseLeave","document","querySelector","classList","remove","toggle","map","id","filterBarText","textContent","Detail","countryToDetail","borderCountryNames","backtoSummaryPage","nativeName","subregion","topLevelDomain","currencies","languages","lang","App","showLoading","showDetail","countries","searchedCountries","filter","switchToTheme","documentElement","getAttribute","setAttribute","currentText","bind","fetch","then","response","json","data","setState","length","reduce","acc","curr","includes","push","catch","lowcaseInput","toLowerCase","filteredCountries","alpha3Code","borders","code","getCountryNamebyAlpha3Code","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.495c550f.chunk.js","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nclass Country extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  }\r\n    }\r\n    render() {\r\n        const {country, gotoDetailCountry} =this.props; \r\n        return ( \r\n            <div className='country-intro-card' onClick ={()=>{\r\n                gotoDetailCountry(country.name);\r\n            }}> \r\n                <img src={country.flag} alt={country.flag} className=\"flagAtAllPage\"></img>\r\n                <div className=\"country-intro-info\">\r\n                    <h2 className=\"heading-2\"> {country.name}</h2>\r\n                    <p>Population: <span className=\"text-1\">{country.population.toLocaleString()}</span></p>\r\n                    <p>Region: <span className=\"text-1\">{country.region}</span></p>\r\n                    <p>Capital: <span className=\"text-1\">{country.capital}</span></p>\r\n                </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Country;","import React, { Component } from 'react';\r\nimport Country from './country';\r\n\r\n\r\nclass AllCountry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \r\n          }\r\n\r\n    }\r\n    render() { \r\n        let {countriesToRender, searchCountriesbyName, filterCountriesbyRegion, gotoDetailCountry, regions} = this.props; \r\n\r\n        return ( \r\n            <div className =\"container-all\">\r\n                <div className=\"container-searh-bar\">\r\n                    <div className =\"search-bar\">\r\n                        <span className=\"icofont-search-2 magnifier\"></span>\r\n                        <input type=\"text\" className=\"search-input\" placeholder=\"Search for a Country\"\r\n                            onChange ={(e)=>{\r\n                             const input = e.target.value\r\n                             searchCountriesbyName(input);\r\n                         }}\r\n                        /> \r\n                    </div>\r\n                    <div className=\"filter-bar\" onMouseLeave={(e)=>{\r\n                         const regionList=document.querySelector('.region-list');\r\n                         regionList.classList.remove(\"region-list--shown\");\r\n                    }}>\r\n                        <div className =\"filter-bar-innerbox\" onClick={(e) =>{\r\n                            const regionList=document.querySelector('.region-list');\r\n                            regionList.classList.toggle(\"region-list--shown\");\r\n                        }} >\r\n                            <span className=\"filterBarText\">Filter By Region</span>\r\n                            <span> &#9663;</span> \r\n                        </div>\r\n                        <div className=\"region-list\">\r\n                            {regions.map(region=><div \r\n                            className=\"region\" \r\n                            id ={region}\r\n                            onClick = {(e)=>{\r\n                                filterCountriesbyRegion(region);\r\n                                const filterBarText = document.querySelector(\".filterBarText\");\r\n                                if(region!=\"all\") filterBarText.textContent=region;\r\n                                else filterBarText.textContent=\"Filter By Region\";\r\n                                const regionList=document.querySelector('.region-list');\r\n                                regionList.classList.remove(\"region-list--shown\");\r\n                            }}\r\n                            >{region}</div>)}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"container-countries\">\r\n                    {countriesToRender.map(country => <Country \r\n                        country={country}\r\n                        gotoDetailCountry={gotoDetailCountry}/>)}\r\n                </div>\r\n            </div>    \r\n            );\r\n    }\r\n}\r\n \r\nexport default AllCountry;\r\n\r\n\r\n","import React, { Component } from 'react';\r\nclass Detail extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  }\r\n    }\r\n    render() { \r\n\r\n        const {countryToDetail,\r\n            borderCountryNames, \r\n            gotoDetailCountry, \r\n            backtoSummaryPage}=this.props;        \r\n\r\n        return ( \r\n            <div className =\"container-detail\">\r\n                \r\n                <div className=\"btn-back\"\r\n                 onClick={backtoSummaryPage}                >\r\n                    <span>&#8592; </span> \r\n                    <span>Back</span>\r\n                </div>\r\n\r\n                <div className=\"country-detail-card\">\r\n                    <img src={countryToDetail.flag} alt=\"\" className=\"flagAtDetailPage\"></img>\r\n                    <div className=\"country-detail-info\">\r\n                        <h2 className=\"heading-2\"> {countryToDetail.name}</h2>\r\n                        <div className=\"detail-information\">\r\n                            <div className='detail-information-1'>\r\n                                <p>Native Name: <span className=\"text-1\">{countryToDetail.nativeName}</span></p>\r\n                                <p>Population: <span className=\"text-1\">{countryToDetail.population.toLocaleString()}</span></p>\r\n                                <p>Region: <span className=\"text-1\">{countryToDetail.region}</span></p>\r\n                                <p>Sub Region: <span className=\"text-1\">{countryToDetail.subregion}</span></p>\r\n                                <p>Capital: <span className=\"text-1\">{countryToDetail.capital}</span></p>\r\n                            </div>\r\n                            <div className='detail-information-section-2'>\r\n                                <p>Top Level Domain: <span className=\"text-1\">{countryToDetail.topLevelDomain[0]}</span></p>\r\n                                <p>Currencies: <span className=\"text-1\">{countryToDetail.currencies[0].name}</span></p>\r\n                                <p>Language: <span className=\"text-1\">{countryToDetail.languages.map(lang => <span>{lang.name}, </span>)}</span></p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <h3 className=\"heading-3\"> Border Countries</h3>\r\n                        <div className=\"border-countries\"> \r\n                            {borderCountryNames.map(name => <div className=\"border-country\" id={name} \r\n                            onClick ={()=>gotoDetailCountry(name)}\r\n                            >{name}</div>)}\r\n                        </div>\r\n                    </div>\r\n                </div> \r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Detail;","import React, { Component } from 'react';\nimport AllCountry from './allcountry';\nimport Detail from './detail';\nimport './App.css';\n\n\nclass App extends Component {\n  state= {\n    showLoading:true,\n    showDetail:false,\n    countries:[],\n    searchedCountries:[],\n    filter:\"all\",\n    regions:[\"all\"],\n    countriesToRender:[],\n    countryToDetail:{},\n    borderCountryNames:[],\n  }\n  \n  render(){\n      return (\n          <div className=\"App\">\n            <header className=\"header\">\n              <h1 className=\"heading-1\">Where is the world?</h1>\n              <button className=\"btn-dark-mode\"\n                onClick ={(e)=>{\n                  let currentTheme = document.documentElement.getAttribute(\"data-theme\")\n                  let switchToTheme = currentTheme === \"dark\" ? \"light\" : \"dark\";\n                  document.documentElement.setAttribute(\"data-theme\", switchToTheme);\n                  let currentText = document.querySelector(\".color-mode\").textContent;\n                  document.querySelector(\".color-mode\").textContent = currentText === \"Dark Mode\" ? \"Light Mode\" : \"Dark Mode\";\n                }}\n              > <span className=\"icofont-moon\"> </span> <span className=\"color-mode\">Dark Mode</span></button>\n            </header>\n            {\n            this.state.showLoading? \n              <h1>Page is loading... please refresh if necessary</h1> \n              : this.state.showDetail ? \n                <Detail \n                  countryToDetail={this.state.countryToDetail}\n                  borderCountryNames={this.state.borderCountryNames}\n                  gotoDetailCountry={this.gotoDetailCountry.bind(this)}\n                  backtoSummaryPage={this.backtoSummaryPage.bind(this)}\n                /> \n                :<AllCountry \n                  countriesToRender={this.state.countriesToRender}\n                  searchCountriesbyName={this.searchCountriesbyName.bind(this)} \n                  filterCountriesbyRegion={this.filterCountriesbyRegion.bind(this)}\n                  gotoDetailCountry={this.gotoDetailCountry.bind(this)}\n                  regions={this.state.regions}\n                />\n            }\n          </div> \n      );\n  }\n\n  componentDidMount(){\n    fetch('https://restcountries.eu/rest/v2/all')\n    .then(response => response.json())\n    .then(data => {\n      this.setState({countries: data});\n      if (this.state.countries.length > 0) {\n        this.setState({showLoading:false});\n        this.setState({searchedCountries:this.state.countries});\n        this.setState({countriesToRender:this.state.countries});\n      const regions = data.reduce(reducer, [\"all\"])\n      function reducer(acc, curr) {\n         if(acc.includes(curr.region)) return acc;\n         else {acc.push(curr.region)\n          return acc;\n          }\n        }\n      this.setState({regions:regions});  \n      }\n    })\n    .catch(() => this.setState({showLoading:true})) \n\n\n  }\n\n\n  searchCountriesbyName(input){\n    const lowcaseInput =input.toLowerCase(); \n    const searchedCountries = this.state.countries.filter(country =>\n      country.name.toLowerCase().includes(lowcaseInput));\n\n    const regions = searchedCountries.reduce(reducer, [\"all\"])\n    function reducer(acc, curr) {\n     if(acc.includes(curr.region)) return acc;\n     else {acc.push(curr.region)\n      return acc;\n      }\n    }\n    this.setState({regions:regions});\n    this.setState({searchedCountries:searchedCountries}, \n      ()=>this.filterCountriesbyRegion(this.state.filter));\n\n    // if(filter===\"all\") {\n    //   this.setState({countriesToRender:searchedCountries});}\n    // else{\n    // const filteredCountries = searchedCountries.filter(country =>\n    //   country.region === filter);\n    // this.setState({countriesToRender:filteredCountries});\n    // }\n  }\n\n  filterCountriesbyRegion(region){\n    this.setState({filter:region});\n    if(region===\"all\") {\n      this.setState({countriesToRender:this.state.searchedCountries});}\n    else{\n    const filteredCountries = this.state.searchedCountries.filter(country =>\n      country.region === region);\n    this.setState({countriesToRender:filteredCountries});\n    }\n  }\n\n  getCountryNamebyAlpha3Code(alpha3Code){\n\n    const searchedCountries = this.state.countries.filter(country =>\n      country.alpha3Code === alpha3Code);\n \n    return searchedCountries[0].name;\n    // return 1;\n    }\n  \n  gotoDetailCountry(name){\n\n    const searchedCountries = this.state.countries.filter(country =>\n    country.name === name);\n    this.setState({countryToDetail:searchedCountries[0]});\n    const borderCountryCodes = searchedCountries[0].borders;\n    const borderCountryNames = borderCountryCodes.map(code => this.getCountryNamebyAlpha3Code(code))\n    this.setState({borderCountryNames:borderCountryNames});\n    this.setState({showDetail:true})\n  } \n  \n  backtoSummaryPage(){\n    // this.setState({countriesToRender:this.state.countries});\n    this.setState({showDetail:false});\n  }\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}